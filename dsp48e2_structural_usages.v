/* Generated by Yosys 0.48+70 (git sha1 6225abec7, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3) */

module unsigned_muladd_1_stage_26_17_48_bit_dsp48e2_impl(a, b, c, clk, out);
  wire [47:0] P_0;
  input [25:0] a;
  wire [25:0] a;
  input [16:0] b;
  wire [16:0] b;
  input [47:0] c;
  wire [47:0] c;
  input clk;
  wire clk;
  output [47:0] out;
  wire [47:0] out;
  DSP48E2 #(
    .ACASCREG(32'd0),
    .ADREG(32'd0),
    .ALUMODEREG(32'd1),
    .AMULTSEL("AD"),
    .AREG(32'd0),
    .AUTORESET_PATDET("NO_RESET"),
    .AUTORESET_PRIORITY("RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(32'd0),
    .BMULTSEL("B"),
    .BREG(32'd0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(32'd0),
    .CARRYINSELREG(32'd1),
    .CREG(32'd0),
    .DREG(32'd1),
    .INMODEREG(32'd1),
    .IS_ALUMODE_INVERTED(4'h0),
    .IS_CARRYIN_INVERTED(1'h0),
    .IS_CLK_INVERTED(1'h0),
    .IS_INMODE_INVERTED(5'h00),
    .IS_OPMODE_INVERTED(9'h000),
    .IS_RSTALLCARRYIN_INVERTED(1'h0),
    .IS_RSTALUMODE_INVERTED(1'h0),
    .IS_RSTA_INVERTED(1'h0),
    .IS_RSTB_INVERTED(1'h0),
    .IS_RSTCTRL_INVERTED(1'h0),
    .IS_RSTC_INVERTED(1'h0),
    .IS_RSTD_INVERTED(1'h0),
    .IS_RSTINMODE_INVERTED(1'h0),
    .IS_RSTM_INVERTED(1'h0),
    .IS_RSTP_INVERTED(1'h0),
    .MASK(48'h000000000000),
    .MREG(32'd0),
    .OPMODEREG(32'd0),
    .PATTERN(48'h000000000000),
    .PREADDINSEL("A"),
    .PREG(32'd1),
    .RND(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48"),
    .USE_WIDEXOR("FALSE"),
    .XORSIMD("XOR12")
  ) DSP48E2_0 (
    .A({ 4'h0, a }),
    .ACIN(30'h00000000),
    .ALUMODE(4'h1),
    .B({ 1'h0, b }),
    .BCIN(18'h00000),
    .C(c),
    .CARRYCASCIN(1'h0),
    .CARRYIN(1'h0),
    .CARRYINSEL(3'h7),
    .CEA1(1'h1),
    .CEA2(1'h1),
    .CEAD(1'h1),
    .CEALUMODE(1'h1),
    .CEB1(1'h1),
    .CEB2(1'h1),
    .CEC(1'h1),
    .CECARRYIN(1'h1),
    .CECTRL(1'h1),
    .CED(1'h1),
    .CEINMODE(1'h1),
    .CEM(1'h1),
    .CEP(1'h1),
    .CLK(clk),
    .D(c[26:0]),
    .INMODE(5'h0d),
    .MULTSIGNIN(1'h0),
    .OPMODE(9'h195),
    .P(out),
    .PCIN(48'h000000000000),
    .RSTA(1'h0),
    .RSTALLCARRYIN(1'h0),
    .RSTALUMODE(1'h0),
    .RSTB(1'h0),
    .RSTC(1'h0),
    .RSTCTRL(1'h0),
    .RSTD(1'h0),
    .RSTINMODE(1'h0),
    .RSTM(1'h0),
    .RSTP(1'h0)
  );
  assign P_0[47] = out[47];
  assign P_0[46] = out[46];
  assign P_0[45] = out[45];
  assign P_0[44] = out[44];
  assign P_0[43] = out[43];
  assign P_0[42] = out[42];
  assign P_0[41] = out[41];
  assign P_0[40] = out[40];
  assign P_0[39] = out[39];
  assign P_0[38] = out[38];
  assign P_0[37] = out[37];
  assign P_0[36] = out[36];
  assign P_0[35] = out[35];
  assign P_0[34] = out[34];
  assign P_0[33] = out[33];
  assign P_0[32] = out[32];
  assign P_0[31] = out[31];
  assign P_0[30] = out[30];
  assign P_0[29] = out[29];
  assign P_0[28] = out[28];
  assign P_0[27] = out[27];
  assign P_0[26] = out[26];
  assign P_0[25] = out[25];
  assign P_0[24] = out[24];
  assign P_0[23] = out[23];
  assign P_0[22] = out[22];
  assign P_0[21] = out[21];
  assign P_0[20] = out[20];
  assign P_0[19] = out[19];
  assign P_0[18] = out[18];
  assign P_0[17] = out[17];
  assign P_0[16] = out[16];
  assign P_0[15] = out[15];
  assign P_0[14] = out[14];
  assign P_0[13] = out[13];
  assign P_0[12] = out[12];
  assign P_0[11] = out[11];
  assign P_0[10] = out[10];
  assign P_0[9] = out[9];
  assign P_0[8] = out[8];
  assign P_0[7] = out[7];
  assign P_0[6] = out[6];
  assign P_0[5] = out[5];
  assign P_0[4] = out[4];
  assign P_0[3] = out[3];
  assign P_0[2] = out[2];
  assign P_0[1] = out[1];
  assign P_0[0] = out[0];
endmodule

/* Generated by Yosys 0.48+70 (git sha1 6225abec7, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3) */

module unsigned_mulsub_1_stage_26_17_48_bit_dsp48e2_impl(a, b, c, clk, out);
  wire [47:0] P_0;
  input [25:0] a;
  wire [25:0] a;
  input [16:0] b;
  wire [16:0] b;
  input [47:0] c;
  wire [47:0] c;
  input clk;
  wire clk;
  output [47:0] out;
  wire [47:0] out;
  DSP48E2 #(
    .ACASCREG(32'd1),
    .ADREG(32'd0),
    .ALUMODEREG(32'd0),
    .AMULTSEL("A"),
    .AREG(32'd1),
    .AUTORESET_PATDET("NO_RESET"),
    .AUTORESET_PRIORITY("RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(32'd1),
    .BMULTSEL("B"),
    .BREG(32'd1),
    .B_INPUT("DIRECT"),
    .CARRYINREG(32'd0),
    .CARRYINSELREG(32'd0),
    .CREG(32'd1),
    .DREG(32'd0),
    .INMODEREG(32'd0),
    .IS_ALUMODE_INVERTED(4'h0),
    .IS_CARRYIN_INVERTED(1'h0),
    .IS_CLK_INVERTED(1'h0),
    .IS_INMODE_INVERTED(5'h00),
    .IS_OPMODE_INVERTED(9'h000),
    .IS_RSTALLCARRYIN_INVERTED(1'h0),
    .IS_RSTALUMODE_INVERTED(1'h0),
    .IS_RSTA_INVERTED(1'h0),
    .IS_RSTB_INVERTED(1'h0),
    .IS_RSTCTRL_INVERTED(1'h0),
    .IS_RSTC_INVERTED(1'h0),
    .IS_RSTD_INVERTED(1'h0),
    .IS_RSTINMODE_INVERTED(1'h0),
    .IS_RSTM_INVERTED(1'h0),
    .IS_RSTP_INVERTED(1'h0),
    .MASK(48'h000000000000),
    .MREG(32'd0),
    .OPMODEREG(32'd0),
    .PATTERN(48'h000000000000),
    .PREADDINSEL("A"),
    .PREG(32'd0),
    .RND(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48"),
    .USE_WIDEXOR("FALSE"),
    .XORSIMD("XOR12")
  ) DSP48E2_0 (
    .A({ 4'h0, a }),
    .ACIN(30'h00000000),
    .ALUMODE(4'h1),
    .B({ 1'h0, b }),
    .BCIN(18'h00000),
    .C(c),
    .CARRYCASCIN(1'h0),
    .CARRYIN(1'h0),
    .CARRYINSEL(3'h1),
    .CEA1(1'h1),
    .CEA2(1'h1),
    .CEAD(1'h1),
    .CEALUMODE(1'h1),
    .CEB1(1'h1),
    .CEB2(1'h1),
    .CEC(1'h1),
    .CECARRYIN(1'h1),
    .CECTRL(1'h1),
    .CED(1'h1),
    .CEINMODE(1'h1),
    .CEM(1'h1),
    .CEP(1'h1),
    .CLK(clk),
    .D(c[26:0]),
    .INMODE(5'h0c),
    .MULTSIGNIN(1'h0),
    .OPMODE(9'h0b5),
    .P(out),
    .PCIN(48'h000000000000),
    .RSTA(1'h0),
    .RSTALLCARRYIN(1'h0),
    .RSTALUMODE(1'h0),
    .RSTB(1'h0),
    .RSTC(1'h0),
    .RSTCTRL(1'h0),
    .RSTD(1'h0),
    .RSTINMODE(1'h0),
    .RSTM(1'h0),
    .RSTP(1'h0)
  );
  assign P_0[47] = out[47];
  assign P_0[46] = out[46];
  assign P_0[45] = out[45];
  assign P_0[44] = out[44];
  assign P_0[43] = out[43];
  assign P_0[42] = out[42];
  assign P_0[41] = out[41];
  assign P_0[40] = out[40];
  assign P_0[39] = out[39];
  assign P_0[38] = out[38];
  assign P_0[37] = out[37];
  assign P_0[36] = out[36];
  assign P_0[35] = out[35];
  assign P_0[34] = out[34];
  assign P_0[33] = out[33];
  assign P_0[32] = out[32];
  assign P_0[31] = out[31];
  assign P_0[30] = out[30];
  assign P_0[29] = out[29];
  assign P_0[28] = out[28];
  assign P_0[27] = out[27];
  assign P_0[26] = out[26];
  assign P_0[25] = out[25];
  assign P_0[24] = out[24];
  assign P_0[23] = out[23];
  assign P_0[22] = out[22];
  assign P_0[21] = out[21];
  assign P_0[20] = out[20];
  assign P_0[19] = out[19];
  assign P_0[18] = out[18];
  assign P_0[17] = out[17];
  assign P_0[16] = out[16];
  assign P_0[15] = out[15];
  assign P_0[14] = out[14];
  assign P_0[13] = out[13];
  assign P_0[12] = out[12];
  assign P_0[11] = out[11];
  assign P_0[10] = out[10];
  assign P_0[9] = out[9];
  assign P_0[8] = out[8];
  assign P_0[7] = out[7];
  assign P_0[6] = out[6];
  assign P_0[5] = out[5];
  assign P_0[4] = out[4];
  assign P_0[3] = out[3];
  assign P_0[2] = out[2];
  assign P_0[1] = out[1];
  assign P_0[0] = out[0];
endmodule

/* Generated by Yosys 0.48+70 (git sha1 6225abec7, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3) */

module unsigned_addmuladd_1_stage_25_17_48_25_bit_dsp48e2_impl(a, b, c, clk, d, out);
  wire [47:0] P_0;
  input [24:0] a;
  wire [24:0] a;
  input [16:0] b;
  wire [16:0] b;
  input [47:0] c;
  wire [47:0] c;
  input clk;
  wire clk;
  input [24:0] d;
  wire [24:0] d;
  output [47:0] out;
  wire [47:0] out;
  DSP48E2 #(
    .ACASCREG(32'd0),
    .ADREG(32'd0),
    .ALUMODEREG(32'd0),
    .AMULTSEL("AD"),
    .AREG(32'd0),
    .AUTORESET_PATDET("NO_RESET"),
    .AUTORESET_PRIORITY("RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(32'd0),
    .BMULTSEL("B"),
    .BREG(32'd0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(32'd0),
    .CARRYINSELREG(32'd0),
    .CREG(32'd0),
    .DREG(32'd0),
    .INMODEREG(32'd0),
    .IS_ALUMODE_INVERTED(4'h0),
    .IS_CARRYIN_INVERTED(1'h0),
    .IS_CLK_INVERTED(1'h0),
    .IS_INMODE_INVERTED(5'h00),
    .IS_OPMODE_INVERTED(9'h000),
    .IS_RSTALLCARRYIN_INVERTED(1'h0),
    .IS_RSTALUMODE_INVERTED(1'h0),
    .IS_RSTA_INVERTED(1'h0),
    .IS_RSTB_INVERTED(1'h0),
    .IS_RSTCTRL_INVERTED(1'h0),
    .IS_RSTC_INVERTED(1'h0),
    .IS_RSTD_INVERTED(1'h0),
    .IS_RSTINMODE_INVERTED(1'h0),
    .IS_RSTM_INVERTED(1'h0),
    .IS_RSTP_INVERTED(1'h0),
    .MASK(48'h000000000000),
    .MREG(32'd0),
    .OPMODEREG(32'd0),
    .PATTERN(48'h000000000000),
    .PREADDINSEL("A"),
    .PREG(32'd1),
    .RND(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48"),
    .USE_WIDEXOR("FALSE"),
    .XORSIMD("XOR12")
  ) DSP48E2_0 (
    .A({ 5'h00, a }),
    .ACIN(30'h00000000),
    .ALUMODE(4'h1),
    .B({ 1'h0, b }),
    .BCIN(18'h00000),
    .C(c),
    .CARRYCASCIN(1'h0),
    .CARRYIN(1'h0),
    .CARRYINSEL(3'h5),
    .CEA1(1'h1),
    .CEA2(1'h1),
    .CEAD(1'h1),
    .CEALUMODE(1'h1),
    .CEB1(1'h1),
    .CEB2(1'h1),
    .CEC(1'h1),
    .CECARRYIN(1'h1),
    .CECTRL(1'h1),
    .CED(1'h1),
    .CEINMODE(1'h1),
    .CEM(1'h1),
    .CEP(1'h1),
    .CLK(clk),
    .D({ 2'h0, d }),
    .INMODE(5'h04),
    .MULTSIGNIN(1'h0),
    .OPMODE(9'h1c5),
    .P(out),
    .PCIN(c),
    .RSTA(1'h0),
    .RSTALLCARRYIN(1'h0),
    .RSTALUMODE(1'h0),
    .RSTB(1'h0),
    .RSTC(1'h0),
    .RSTCTRL(1'h0),
    .RSTD(1'h0),
    .RSTINMODE(1'h0),
    .RSTM(1'h0),
    .RSTP(1'h0)
  );
  assign P_0[47] = out[47];
  assign P_0[46] = out[46];
  assign P_0[45] = out[45];
  assign P_0[44] = out[44];
  assign P_0[43] = out[43];
  assign P_0[42] = out[42];
  assign P_0[41] = out[41];
  assign P_0[40] = out[40];
  assign P_0[39] = out[39];
  assign P_0[38] = out[38];
  assign P_0[37] = out[37];
  assign P_0[36] = out[36];
  assign P_0[35] = out[35];
  assign P_0[34] = out[34];
  assign P_0[33] = out[33];
  assign P_0[32] = out[32];
  assign P_0[31] = out[31];
  assign P_0[30] = out[30];
  assign P_0[29] = out[29];
  assign P_0[28] = out[28];
  assign P_0[27] = out[27];
  assign P_0[26] = out[26];
  assign P_0[25] = out[25];
  assign P_0[24] = out[24];
  assign P_0[23] = out[23];
  assign P_0[22] = out[22];
  assign P_0[21] = out[21];
  assign P_0[20] = out[20];
  assign P_0[19] = out[19];
  assign P_0[18] = out[18];
  assign P_0[17] = out[17];
  assign P_0[16] = out[16];
  assign P_0[15] = out[15];
  assign P_0[14] = out[14];
  assign P_0[13] = out[13];
  assign P_0[12] = out[12];
  assign P_0[11] = out[11];
  assign P_0[10] = out[10];
  assign P_0[9] = out[9];
  assign P_0[8] = out[8];
  assign P_0[7] = out[7];
  assign P_0[6] = out[6];
  assign P_0[5] = out[5];
  assign P_0[4] = out[4];
  assign P_0[3] = out[3];
  assign P_0[2] = out[2];
  assign P_0[1] = out[1];
  assign P_0[0] = out[0];
endmodule

/* Generated by Yosys 0.48+70 (git sha1 6225abec7, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3) */

module unsigned_addmulsub_1_stage_25_17_48_25_bit_dsp48e2_impl(a, b, c, clk, d, out);
  wire [47:0] P_0;
  input [24:0] a;
  wire [24:0] a;
  input [16:0] b;
  wire [16:0] b;
  input [47:0] c;
  wire [47:0] c;
  input clk;
  wire clk;
  input [24:0] d;
  wire [24:0] d;
  output [47:0] out;
  wire [47:0] out;
  DSP48E2 #(
    .ACASCREG(32'd0),
    .ADREG(32'd0),
    .ALUMODEREG(32'd0),
    .AMULTSEL("AD"),
    .AREG(32'd0),
    .AUTORESET_PATDET("NO_RESET"),
    .AUTORESET_PRIORITY("RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(32'd0),
    .BMULTSEL("B"),
    .BREG(32'd0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(32'd0),
    .CARRYINSELREG(32'd0),
    .CREG(32'd1),
    .DREG(32'd0),
    .INMODEREG(32'd0),
    .IS_ALUMODE_INVERTED(4'h0),
    .IS_CARRYIN_INVERTED(1'h0),
    .IS_CLK_INVERTED(1'h0),
    .IS_INMODE_INVERTED(5'h00),
    .IS_OPMODE_INVERTED(9'h000),
    .IS_RSTALLCARRYIN_INVERTED(1'h0),
    .IS_RSTALUMODE_INVERTED(1'h0),
    .IS_RSTA_INVERTED(1'h0),
    .IS_RSTB_INVERTED(1'h0),
    .IS_RSTCTRL_INVERTED(1'h0),
    .IS_RSTC_INVERTED(1'h0),
    .IS_RSTD_INVERTED(1'h0),
    .IS_RSTINMODE_INVERTED(1'h0),
    .IS_RSTM_INVERTED(1'h0),
    .IS_RSTP_INVERTED(1'h0),
    .MASK(48'h000000000000),
    .MREG(32'd0),
    .OPMODEREG(32'd0),
    .PATTERN(48'h000000000000),
    .PREADDINSEL("A"),
    .PREG(32'd1),
    .RND(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48"),
    .USE_WIDEXOR("FALSE"),
    .XORSIMD("XOR12")
  ) DSP48E2_0 (
    .A({ 5'h00, a }),
    .ACIN(30'h00000000),
    .ALUMODE(4'h1),
    .B({ 1'h0, b }),
    .BCIN(18'h00000),
    .C(c),
    .CARRYCASCIN(1'h0),
    .CARRYIN(1'h0),
    .CARRYINSEL(3'h5),
    .CEA1(1'h1),
    .CEA2(1'h1),
    .CEAD(1'h1),
    .CEALUMODE(1'h1),
    .CEB1(1'h1),
    .CEB2(1'h1),
    .CEC(1'h1),
    .CECARRYIN(1'h1),
    .CECTRL(1'h1),
    .CED(1'h1),
    .CEINMODE(1'h1),
    .CEM(1'h1),
    .CEP(1'h1),
    .CLK(clk),
    .D({ 2'h0, d }),
    .INMODE(5'h04),
    .MULTSIGNIN(1'h0),
    .OPMODE(9'h115),
    .P(out),
    .PCIN(c),
    .RSTA(1'h0),
    .RSTALLCARRYIN(1'h0),
    .RSTALUMODE(1'h0),
    .RSTB(1'h0),
    .RSTC(1'h0),
    .RSTCTRL(1'h0),
    .RSTD(1'h0),
    .RSTINMODE(1'h0),
    .RSTM(1'h0),
    .RSTP(1'h0)
  );
  assign P_0[47] = out[47];
  assign P_0[46] = out[46];
  assign P_0[45] = out[45];
  assign P_0[44] = out[44];
  assign P_0[43] = out[43];
  assign P_0[42] = out[42];
  assign P_0[41] = out[41];
  assign P_0[40] = out[40];
  assign P_0[39] = out[39];
  assign P_0[38] = out[38];
  assign P_0[37] = out[37];
  assign P_0[36] = out[36];
  assign P_0[35] = out[35];
  assign P_0[34] = out[34];
  assign P_0[33] = out[33];
  assign P_0[32] = out[32];
  assign P_0[31] = out[31];
  assign P_0[30] = out[30];
  assign P_0[29] = out[29];
  assign P_0[28] = out[28];
  assign P_0[27] = out[27];
  assign P_0[26] = out[26];
  assign P_0[25] = out[25];
  assign P_0[24] = out[24];
  assign P_0[23] = out[23];
  assign P_0[22] = out[22];
  assign P_0[21] = out[21];
  assign P_0[20] = out[20];
  assign P_0[19] = out[19];
  assign P_0[18] = out[18];
  assign P_0[17] = out[17];
  assign P_0[16] = out[16];
  assign P_0[15] = out[15];
  assign P_0[14] = out[14];
  assign P_0[13] = out[13];
  assign P_0[12] = out[12];
  assign P_0[11] = out[11];
  assign P_0[10] = out[10];
  assign P_0[9] = out[9];
  assign P_0[8] = out[8];
  assign P_0[7] = out[7];
  assign P_0[6] = out[6];
  assign P_0[5] = out[5];
  assign P_0[4] = out[4];
  assign P_0[3] = out[3];
  assign P_0[2] = out[2];
  assign P_0[1] = out[1];
  assign P_0[0] = out[0];
endmodule

/* Generated by Yosys 0.48+70 (git sha1 6225abec7, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3) */

module signed_mul_1_stage_27_18_bit_dsp48e2_impl(a, b, clk, out);
  wire [47:0] P_0;
  input [26:0] a;
  wire [26:0] a;
  input [17:0] b;
  wire [17:0] b;
  input clk;
  wire clk;
  output [44:0] out;
  wire [44:0] out;
  DSP48E2 #(
    .ACASCREG(32'd0),
    .ADREG(32'd0),
    .ALUMODEREG(32'd1),
    .AMULTSEL("AD"),
    .AREG(32'd0),
    .AUTORESET_PATDET("NO_RESET"),
    .AUTORESET_PRIORITY("RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(32'd0),
    .BMULTSEL("B"),
    .BREG(32'd0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(32'd0),
    .CARRYINSELREG(32'd1),
    .CREG(32'd0),
    .DREG(32'd0),
    .INMODEREG(32'd1),
    .IS_ALUMODE_INVERTED(4'h0),
    .IS_CARRYIN_INVERTED(1'h0),
    .IS_CLK_INVERTED(1'h0),
    .IS_INMODE_INVERTED(5'h00),
    .IS_OPMODE_INVERTED(9'h000),
    .IS_RSTALLCARRYIN_INVERTED(1'h0),
    .IS_RSTALUMODE_INVERTED(1'h0),
    .IS_RSTA_INVERTED(1'h0),
    .IS_RSTB_INVERTED(1'h0),
    .IS_RSTCTRL_INVERTED(1'h0),
    .IS_RSTC_INVERTED(1'h0),
    .IS_RSTD_INVERTED(1'h0),
    .IS_RSTINMODE_INVERTED(1'h0),
    .IS_RSTM_INVERTED(1'h0),
    .IS_RSTP_INVERTED(1'h0),
    .MASK(48'h000000000000),
    .MREG(32'd1),
    .OPMODEREG(32'd1),
    .PATTERN(48'h000000000000),
    .PREADDINSEL("A"),
    .PREG(32'd0),
    .RND(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48"),
    .USE_WIDEXOR("FALSE"),
    .XORSIMD("XOR12")
  ) DSP48E2_0 (
    .A({ a[26], a[26], a[26], a }),
    .ACIN(30'h00000000),
    .ALUMODE(4'h1),
    .B(b),
    .BCIN(18'h00000),
    .C(48'h000000000000),
    .CARRYCASCIN(1'h0),
    .CARRYIN(1'h0),
    .CARRYINSEL(3'h1),
    .CEA1(1'h1),
    .CEA2(1'h1),
    .CEAD(1'h1),
    .CEALUMODE(1'h1),
    .CEB1(1'h1),
    .CEB2(1'h1),
    .CEC(1'h1),
    .CECARRYIN(1'h1),
    .CECTRL(1'h1),
    .CED(1'h1),
    .CEINMODE(1'h1),
    .CEM(1'h1),
    .CEP(1'h1),
    .CLK(clk),
    .D(27'h0000000),
    .INMODE(5'h00),
    .MULTSIGNIN(1'h0),
    .OPMODE(9'h005),
    .P({ P_0[47:45], out }),
    .PCIN(48'h000000000000),
    .RSTA(1'h0),
    .RSTALLCARRYIN(1'h0),
    .RSTALUMODE(1'h0),
    .RSTB(1'h0),
    .RSTC(1'h0),
    .RSTCTRL(1'h0),
    .RSTD(1'h0),
    .RSTINMODE(1'h0),
    .RSTM(1'h0),
    .RSTP(1'h0)
  );
  assign P_0[44] = out[44];
  assign P_0[43] = out[43];
  assign P_0[42] = out[42];
  assign P_0[41] = out[41];
  assign P_0[40] = out[40];
  assign P_0[39] = out[39];
  assign P_0[38] = out[38];
  assign P_0[37] = out[37];
  assign P_0[36] = out[36];
  assign P_0[35] = out[35];
  assign P_0[34] = out[34];
  assign P_0[33] = out[33];
  assign P_0[32] = out[32];
  assign P_0[31] = out[31];
  assign P_0[30] = out[30];
  assign P_0[29] = out[29];
  assign P_0[28] = out[28];
  assign P_0[27] = out[27];
  assign P_0[26] = out[26];
  assign P_0[25] = out[25];
  assign P_0[24] = out[24];
  assign P_0[23] = out[23];
  assign P_0[22] = out[22];
  assign P_0[21] = out[21];
  assign P_0[20] = out[20];
  assign P_0[19] = out[19];
  assign P_0[18] = out[18];
  assign P_0[17] = out[17];
  assign P_0[16] = out[16];
  assign P_0[15] = out[15];
  assign P_0[14] = out[14];
  assign P_0[13] = out[13];
  assign P_0[12] = out[12];
  assign P_0[11] = out[11];
  assign P_0[10] = out[10];
  assign P_0[9] = out[9];
  assign P_0[8] = out[8];
  assign P_0[7] = out[7];
  assign P_0[6] = out[6];
  assign P_0[5] = out[5];
  assign P_0[4] = out[4];
  assign P_0[3] = out[3];
  assign P_0[2] = out[2];
  assign P_0[1] = out[1];
  assign P_0[0] = out[0];
endmodule

/* Generated by Yosys 0.48+70 (git sha1 6225abec7, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3) */

module signed_squarediff_3_stage_17_bit_dsp48e2_impl(a, clk, d, out);
  wire [47:0] P_0;
  input [16:0] a;
  wire [16:0] a;
  input clk;
  wire clk;
  input [16:0] d;
  wire [16:0] d;
  output [35:0] out;
  wire [35:0] out;
  DSP48E2 #(
    .ACASCREG(32'd1),
    .ADREG(32'd1),
    .ALUMODEREG(32'd1),
    .AMULTSEL("AD"),
    .AREG(32'd1),
    .AUTORESET_PATDET("NO_RESET"),
    .AUTORESET_PRIORITY("RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(32'd0),
    .BMULTSEL("AD"),
    .BREG(32'd0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(32'd0),
    .CARRYINSELREG(32'd1),
    .CREG(32'd0),
    .DREG(32'd1),
    .INMODEREG(32'd1),
    .IS_ALUMODE_INVERTED(4'h0),
    .IS_CARRYIN_INVERTED(1'h0),
    .IS_CLK_INVERTED(1'h0),
    .IS_INMODE_INVERTED(5'h00),
    .IS_OPMODE_INVERTED(9'h000),
    .IS_RSTALLCARRYIN_INVERTED(1'h0),
    .IS_RSTALUMODE_INVERTED(1'h0),
    .IS_RSTA_INVERTED(1'h0),
    .IS_RSTB_INVERTED(1'h0),
    .IS_RSTCTRL_INVERTED(1'h0),
    .IS_RSTC_INVERTED(1'h0),
    .IS_RSTD_INVERTED(1'h0),
    .IS_RSTINMODE_INVERTED(1'h0),
    .IS_RSTM_INVERTED(1'h0),
    .IS_RSTP_INVERTED(1'h0),
    .MASK(48'h000000000000),
    .MREG(32'd0),
    .OPMODEREG(32'd1),
    .PATTERN(48'h000000000000),
    .PREADDINSEL("A"),
    .PREG(32'd1),
    .RND(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48"),
    .USE_WIDEXOR("FALSE"),
    .XORSIMD("XOR12")
  ) DSP48E2_0 (
    .A({ 13'h0000, a }),
    .ACIN(30'h00000000),
    .ALUMODE(4'h0),
    .B(18'h00000),
    .BCIN(18'h00000),
    .C(48'h000000000000),
    .CARRYCASCIN(1'h0),
    .CARRYIN(1'h0),
    .CARRYINSEL(3'h7),
    .CEA1(1'h1),
    .CEA2(1'h1),
    .CEAD(1'h1),
    .CEALUMODE(1'h1),
    .CEB1(1'h1),
    .CEB2(1'h1),
    .CEC(1'h1),
    .CECARRYIN(1'h1),
    .CECTRL(1'h1),
    .CED(1'h1),
    .CEINMODE(1'h1),
    .CEM(1'h1),
    .CEP(1'h1),
    .CLK(clk),
    .D({ 10'h000, d }),
    .INMODE(5'h0c),
    .MULTSIGNIN(1'h0),
    .OPMODE(9'h005),
    .P({ P_0[47:36], out }),
    .PCIN(48'h000000000000),
    .RSTA(1'h0),
    .RSTALLCARRYIN(1'h0),
    .RSTALUMODE(1'h0),
    .RSTB(1'h0),
    .RSTC(1'h0),
    .RSTCTRL(1'h0),
    .RSTD(1'h0),
    .RSTINMODE(1'h0),
    .RSTM(1'h0),
    .RSTP(1'h0)
  );
  assign P_0[35] = out[35];
  assign P_0[34] = out[34];
  assign P_0[33] = out[33];
  assign P_0[32] = out[32];
  assign P_0[31] = out[31];
  assign P_0[30] = out[30];
  assign P_0[29] = out[29];
  assign P_0[28] = out[28];
  assign P_0[27] = out[27];
  assign P_0[26] = out[26];
  assign P_0[25] = out[25];
  assign P_0[24] = out[24];
  assign P_0[23] = out[23];
  assign P_0[22] = out[22];
  assign P_0[21] = out[21];
  assign P_0[20] = out[20];
  assign P_0[19] = out[19];
  assign P_0[18] = out[18];
  assign P_0[17] = out[17];
  assign P_0[16] = out[16];
  assign P_0[15] = out[15];
  assign P_0[14] = out[14];
  assign P_0[13] = out[13];
  assign P_0[12] = out[12];
  assign P_0[11] = out[11];
  assign P_0[10] = out[10];
  assign P_0[9] = out[9];
  assign P_0[8] = out[8];
  assign P_0[7] = out[7];
  assign P_0[6] = out[6];
  assign P_0[5] = out[5];
  assign P_0[4] = out[4];
  assign P_0[3] = out[3];
  assign P_0[2] = out[2];
  assign P_0[1] = out[1];
  assign P_0[0] = out[0];
endmodule

